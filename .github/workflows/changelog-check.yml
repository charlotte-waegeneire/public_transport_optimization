name: Version Check

on:
  pull_request:
    branches: [ main ]
    paths: 
      - 'public_transport_watcher/VERSION.txt'
      - 'CHANGELOG.md'

jobs:
  check-version:
    runs-on: ubuntu-latest
    # Ce job doit réussir pour permettre le merge
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get current version from main
      id: main-version
      run: |
        git checkout main
        MAIN_VERSION=$(cat public_transport_watcher/VERSION.txt)
        echo "version=$MAIN_VERSION" >> $GITHUB_OUTPUT
        echo "Version actuelle sur main: $MAIN_VERSION"
    
    - name: Get new version from PR branch
      id: pr-version
      run: |
        git checkout ${{ github.head_ref }}
        PR_VERSION=$(cat version.txt)
        echo "version=$PR_VERSION" >> $GITHUB_OUTPUT
        echo "Nouvelle version dans la PR: $PR_VERSION"
    
    - name: Validate version format
      run: |
        # Vérifier le format semver (X.Y.Z)
        if ! echo "${{ steps.pr-version.outputs.version }}" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$'; then
          echo "❌ Erreur: La version doit respecter le format semver (X.Y.Z)"
          exit 1
        fi
        echo "✅ Format de version valide"
    
    - name: Compare versions and validate increment
      run: |
        MAIN_VERSION="${{ steps.main-version.outputs.version }}"
        PR_VERSION="${{ steps.pr-version.outputs.version }}"
        
        # Extraire les composants de version
        IFS='.' read -r main_major main_minor main_patch <<< "$MAIN_VERSION"
        IFS='.' read -r pr_major pr_minor pr_patch <<< "$PR_VERSION"
        
        echo "Version main: $main_major.$main_minor.$main_patch"
        echo "Version PR: $pr_major.$pr_minor.$pr_patch"
        
        # Vérifier que la nouvelle version est supérieure
        if [[ $pr_major -lt $main_major ]] || 
           [[ $pr_major -eq $main_major && $pr_minor -lt $main_minor ]] || 
           [[ $pr_major -eq $main_major && $pr_minor -eq $main_minor && $pr_patch -le $main_patch ]]; then
          echo "❌ Erreur: La nouvelle version ($PR_VERSION) doit être supérieure à la version actuelle ($MAIN_VERSION)"
          exit 1
        fi
        
        # Vérifier qu'il n'y a qu'une seule incrémentation
        valid_increment=false
        
        # Increment patch (X.Y.Z -> X.Y.Z+1)
        if [[ $pr_major -eq $main_major && $pr_minor -eq $main_minor && $pr_patch -eq $((main_patch + 1)) ]]; then
          echo "✅ Incrémentation de patch valide: $MAIN_VERSION -> $PR_VERSION"
          valid_increment=true
        fi
        
        # Increment minor (X.Y.Z -> X.Y+1.0)
        if [[ $pr_major -eq $main_major && $pr_minor -eq $((main_minor + 1)) && $pr_patch -eq 0 ]]; then
          echo "✅ Incrémentation de version mineure valide: $MAIN_VERSION -> $PR_VERSION"
          valid_increment=true
        fi
        
        # Increment major (X.Y.Z -> X+1.0.0)
        if [[ $pr_major -eq $((main_major + 1)) && $pr_minor -eq 0 && $pr_patch -eq 0 ]]; then
          echo "✅ Incrémentation de version majeure valide: $MAIN_VERSION -> $PR_VERSION"
          valid_increment=true
        fi
        
        if [[ $valid_increment == false ]]; then
          echo "❌ Erreur: Incrémentation de version invalide"
          echo "Changements autorisés à partir de $MAIN_VERSION :"
          echo "  - Patch: $main_major.$main_minor.$((main_patch + 1))"
          echo "  - Minor: $main_major.$((main_minor + 1)).0"
          echo "  - Major: $((main_major + 1)).0.0"
          echo "Version proposée: $PR_VERSION"
          echo "::error::Version increment validation failed"
          exit 1
        fi
    
    - name: Check if version.txt is the only change (optional)
      run: |
        # Optionnel: vérifier si d'autres fichiers ont été modifiés
        CHANGED_FILES=$(git diff --name-only main..HEAD)
        if [[ "$CHANGED_FILES" != "public_transport_watcher/VERSION.txt" ]]; then
          echo "⚠️  Attention: D'autres fichiers ont été modifiés en plus de VERSION.txt"
          echo "Fichiers modifiés:"
          echo "$CHANGED_FILES"
        else
          echo "✅ Seul le fichier VERSION.txt a été modifié"
        fi
  
  check-changelog:
    runs-on: ubuntu-latest
    needs: check-version
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get version from PR
      id: pr-version
      run: |
        git checkout ${{ github.head_ref }}
        PR_VERSION=$(cat public_transport_watcher/VERSION.txt)
        echo "version=$PR_VERSION" >> $GITHUB_OUTPUT
        echo "Version de la PR: $PR_VERSION"
    
    - name: Check if CHANGELOG.md exists
      run: |
        if [[ ! -f "CHANGELOG.md" ]]; then
          echo "❌ Erreur: Le fichier CHANGELOG.md n'existe pas à la racine du projet"
          echo "Créez un fichier CHANGELOG.md avec le format suivant :"
          echo ""
          echo "# Changelog"
          echo ""
          echo "## [VERSION] - YYYY-MM-DD"
          echo "### Added"
          echo "- Nouvelle fonctionnalité"
          echo "### Changed" 
          echo "- Modification existante"
          echo "### Fixed"
          echo "- Correction de bug"
          exit 1
        fi
        echo "✅ CHANGELOG.md existe"
    
    - name: Check if CHANGELOG.md was modified in this PR
      run: |
        # Vérifier si CHANGELOG.md a été modifié dans cette PR
        CHANGED_FILES=$(git diff --name-only main..HEAD)
        if ! echo "$CHANGED_FILES" | grep -q "CHANGELOG.md"; then
          echo "❌ Erreur: CHANGELOG.md doit être mis à jour quand la version change"
          echo "Fichiers modifiés dans cette PR:"
          echo "$CHANGED_FILES"
          echo ""
          echo "Veuillez ajouter une entrée dans CHANGELOG.md pour la version ${{ steps.pr-version.outputs.version }}"
          exit 1
        fi
        echo "✅ CHANGELOG.md a été modifié dans cette PR"
    
    - name: Validate CHANGELOG.md contains the new version
      run: |
        PR_VERSION="${{ steps.pr-version.outputs.version }}"
        
        # Vérifier que la nouvelle version apparaît dans le CHANGELOG
        if ! grep -q "\[$PR_VERSION\]" CHANGELOG.md; then
          echo "❌ Erreur: La version $PR_VERSION n'est pas présente dans CHANGELOG.md"
          echo ""
          echo "Format attendu dans CHANGELOG.md :"
          echo "## [$PR_VERSION] - $(date +%Y-%m-%d)"
          echo "### Added"
          echo "- Description des changements..."
          echo ""
          echo "Contenu actuel du CHANGELOG.md :"
          echo "----------------------------------------"
          head -20 CHANGELOG.md
          exit 1
        fi
        echo "✅ Version $PR_VERSION trouvée dans CHANGELOG.md"
    
    - name: Check CHANGELOG.md format and position
      run: |
        PR_VERSION="${{ steps.pr-version.outputs.version }}"
        
        # Vérifier que la nouvelle version est bien en haut du changelog (après le titre)
        # Extraire les premières lignes après "# Changelog" ou "# CHANGELOG"
        FIRST_VERSION_LINE=$(grep -n "## \[" CHANGELOG.md | head -1 | cut -d: -f1)
        FIRST_VERSION=$(grep "## \[" CHANGELOG.md | head -1)
        
        if [[ -z "$FIRST_VERSION_LINE" ]]; then
          echo "❌ Erreur: Aucune entrée de version trouvée dans CHANGELOG.md"
          echo "Format attendu: ## [VERSION] - DATE"
          exit 1
        fi
        
        # Vérifier que la première version dans le changelog est la nouvelle version
        if ! echo "$FIRST_VERSION" | grep -q "\[$PR_VERSION\]"; then
          echo "❌ Erreur: La version $PR_VERSION doit être la première entrée dans CHANGELOG.md"
          echo "Première version trouvée: $FIRST_VERSION"
          echo "Version attendue: ## [$PR_VERSION] - $(date +%Y-%m-%d)"
          echo ""
          echo "Assurez-vous que la nouvelle version soit en haut du changelog."
          exit 1
        fi
        
        echo "✅ Version $PR_VERSION correctement positionnée en première dans CHANGELOG.md"
    
    - name: Validate CHANGELOG.md date format
      run: |
        PR_VERSION="${{ steps.pr-version.outputs.version }}"
        
        # Extraire la ligne de version et vérifier le format de date
        VERSION_LINE=$(grep "## \[$PR_VERSION\]" CHANGELOG.md)
        
        # Vérifier le format de date (YYYY-MM-DD)
        if ! echo "$VERSION_LINE" | grep -E "\[$PR_VERSION\] - [0-9]{4}-[0-9]{2}-[0-9]{2}" > /dev/null; then
          echo "⚠️  Attention: Format de date recommandé non respecté"
          echo "Ligne trouvée: $VERSION_LINE"
          echo "Format recommandé: ## [$PR_VERSION] - $(date +%Y-%m-%d)"
          echo ""
          echo "Le format de date devrait être YYYY-MM-DD"
        else
          echo "✅ Format de date correct dans CHANGELOG.md"
        fi