name: Version Check

on:
  pull_request:
    branches: [ main ]
    paths: 
      - 'public_transport_watcher/VERSION.txt'
      - 'CHANGELOG.md'

jobs:
  check-version:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get current version from main
      id: main-version
      run: |
        git checkout main
        MAIN_VERSION=$(cat public_transport_watcher/VERSION.txt)
        echo "version=$MAIN_VERSION" >> $GITHUB_OUTPUT
        echo "Current version on main: $MAIN_VERSION"
    
    - name: Get new version from PR branch
      id: pr-version
      run: |
        git checkout ${{ github.head_ref }}
        PR_VERSION=$(cat public_transport_watcher/VERSION.txt)
        echo "version=$PR_VERSION" >> $GITHUB_OUTPUT
        echo "New version in PR: $PR_VERSION"
    
    - name: Validate version format
      run: |
        # Check semver format (X.Y.Z)
        if ! echo "${{ steps.pr-version.outputs.version }}" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$'; then
          echo "❌ Error: Version must follow semver format (X.Y.Z)"
          exit 1
        fi
        echo "✅ Valid version format"
    
    - name: Compare versions and validate increment
      run: |
        MAIN_VERSION="${{ steps.main-version.outputs.version }}"
        PR_VERSION="${{ steps.pr-version.outputs.version }}"
        
        # Extract version components
        IFS='.' read -r main_major main_minor main_patch <<< "$MAIN_VERSION"
        IFS='.' read -r pr_major pr_minor pr_patch <<< "$PR_VERSION"
        
        echo "Main version: $main_major.$main_minor.$main_patch"
        echo "PR version: $pr_major.$pr_minor.$pr_patch"
        
        # Check that new version is greater
        if [[ $pr_major -lt $main_major ]] || 
           [[ $pr_major -eq $main_major && $pr_minor -lt $main_minor ]] || 
           [[ $pr_major -eq $main_major && $pr_minor -eq $main_minor && $pr_patch -le $main_patch ]]; then
          echo "❌ Error: New version ($PR_VERSION) must be greater than current version ($MAIN_VERSION)"
          exit 1
        fi
        
        # Check for single increment only
        valid_increment=false
        
        # Patch increment (X.Y.Z -> X.Y.Z+1)
        if [[ $pr_major -eq $main_major && $pr_minor -eq $main_minor && $pr_patch -eq $((main_patch + 1)) ]]; then
          echo "✅ Valid patch increment: $MAIN_VERSION -> $PR_VERSION"
          valid_increment=true
        fi
        
        # Minor increment (X.Y.Z -> X.Y+1.0)
        if [[ $pr_major -eq $main_major && $pr_minor -eq $((main_minor + 1)) && $pr_patch -eq 0 ]]; then
          echo "✅ Valid minor increment: $MAIN_VERSION -> $PR_VERSION"
          valid_increment=true
        fi
        
        # Major increment (X.Y.Z -> X+1.0.0)
        if [[ $pr_major -eq $((main_major + 1)) && $pr_minor -eq 0 && $pr_patch -eq 0 ]]; then
          echo "✅ Valid major increment: $MAIN_VERSION -> $PR_VERSION"
          valid_increment=true
        fi
        
        if [[ $valid_increment == false ]]; then
          echo "❌ Error: Invalid version increment"
          echo "Allowed changes from $MAIN_VERSION:"
          echo "  - Patch: $main_major.$main_minor.$((main_patch + 1))"
          echo "  - Minor: $main_major.$((main_minor + 1)).0"
          echo "  - Major: $((main_major + 1)).0.0"
          echo "Proposed version: $PR_VERSION"
          echo "::error::Version increment validation failed"
          exit 1
        fi
    
    - name: Check changed files summary
      run: |
        # Show which files were modified
        CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
        echo "Files modified in this PR:"
        echo "$CHANGED_FILES"
  
  check-changelog:
    runs-on: ubuntu-latest
    needs: check-version
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get version from PR
      id: pr-version
      run: |
        git checkout ${{ github.head_ref }}
        PR_VERSION=$(cat public_transport_watcher/VERSION.txt)
        echo "version=$PR_VERSION" >> $GITHUB_OUTPUT
        echo "PR version: $PR_VERSION"
    
    - name: Check if CHANGELOG.md exists
      run: |
        if [[ ! -f "CHANGELOG.md" ]]; then
          echo "❌ Error: CHANGELOG.md file does not exist at project root"
          echo "Create a CHANGELOG.md file with the following format:"
          echo ""
          echo "# Changelog"
          echo ""
          echo "## [VERSION] - YYYY-MM-DD"
          echo "### Added"
          echo "- New feature"
          echo "### Changed" 
          echo "- Existing modification"
          echo "### Fixed"
          echo "- Bug fix"
          exit 1
        fi
        echo "✅ CHANGELOG.md exists"
    
    - name: Check if CHANGELOG.md was modified in this PR
      run: |
        # Check if CHANGELOG.md was modified in this PR
        # Use GitHub API to get modified files
        CHANGED_FILES=$(gh pr view ${{ github.event.number }} --json files --jq '.files[].path' || true)
        
        # Fallback with git if gh is not available
        if [[ -z "$CHANGED_FILES" ]]; then
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
        fi
        
        if ! echo "$CHANGED_FILES" | grep -q "CHANGELOG.md"; then
          echo "❌ Error: CHANGELOG.md must be updated when version changes"
          echo "Files modified in this PR:"
          echo "$CHANGED_FILES"
          echo ""
          echo "Please add an entry in CHANGELOG.md for version ${{ steps.pr-version.outputs.version }}"
          exit 1
        fi
        echo "✅ CHANGELOG.md was modified in this PR"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Validate CHANGELOG.md contains the new version
      run: |
        PR_VERSION="${{ steps.pr-version.outputs.version }}"
        
        # Check that the new version appears in CHANGELOG
        if ! grep -q "\[$PR_VERSION\]" CHANGELOG.md; then
          echo "❌ Error: Version $PR_VERSION is not present in CHANGELOG.md"
          echo ""
          echo "Expected format in CHANGELOG.md:"
          echo "## [$PR_VERSION] - $(date +%Y-%m-%d)"
          echo "### Added"
          echo "- Description of changes..."
          echo ""
          echo "Current CHANGELOG.md content:"
          echo "----------------------------------------"
          head -20 CHANGELOG.md
          exit 1
        fi
        echo "✅ Version $PR_VERSION found in CHANGELOG.md"
    
    - name: Check CHANGELOG.md format and position
      run: |
        PR_VERSION="${{ steps.pr-version.outputs.version }}"
        
        # Check that the new version is at the top of changelog (after title)
        # Extract first lines after "# Changelog" or "# CHANGELOG"
        FIRST_VERSION_LINE=$(grep -n "## \[" CHANGELOG.md | head -1 | cut -d: -f1)
        FIRST_VERSION=$(grep "## \[" CHANGELOG.md | head -1)
        
        if [[ -z "$FIRST_VERSION_LINE" ]]; then
          echo "❌ Error: No version entry found in CHANGELOG.md"
          echo "Expected format: ## [VERSION] - DATE"
          exit 1
        fi
        
        # Check that the first version in changelog is the new version
        if ! echo "$FIRST_VERSION" | grep -q "\[$PR_VERSION\]"; then
          echo "❌ Error: Version $PR_VERSION must be the first entry in CHANGELOG.md"
          echo "First version found: $FIRST_VERSION"
          echo "Expected version: ## [$PR_VERSION] - $(date +%Y-%m-%d)"
          echo ""
          echo "Make sure the new version is at the top of the changelog."
          exit 1
        fi
        
        echo "✅ Version $PR_VERSION correctly positioned first in CHANGELOG.md"
    
    - name: Validate CHANGELOG.md date format
      run: |
        PR_VERSION="${{ steps.pr-version.outputs.version }}"
        
        # Extract version line and check date format
        VERSION_LINE=$(grep "## \[$PR_VERSION\]" CHANGELOG.md)
        
        # Check date format (YYYY-MM-DD)
        if ! echo "$VERSION_LINE" | grep -E "\[$PR_VERSION\] - [0-9]{4}-[0-9]{2}-[0-9]{2}" > /dev/null; then
          echo "⚠️  Warning: Recommended date format not respected"
          echo "Found line: $VERSION_LINE"
          echo "Recommended format: ## [$PR_VERSION] - $(date +%Y-%m-%d)"
          echo ""
          echo "Date format should be YYYY-MM-DD"
        else
          echo "✅ Correct date format in CHANGELOG.md"
        fi