input {
  file {
    path => "${LOGS_ROOT}/api/api_logs.json"
    start_position => "beginning"
    sincedb_path => "/usr/share/logstash/data/sincedb"
    codec => "json"
    type => "api_logs"
  }
}

filter {
  if [type] == "api_logs" {
    date {
      match => [ "[log][timestamp]", "ISO8601" ]
      target => "@timestamp"
    }

    mutate {
      add_field => {
        "[@metadata][log_id]" => "%{[log][id]}"
        "[@metadata][timestamp]" => "%{@timestamp}"
      }
    }

    # Convert the timestamp to PostgreSQL compatible format
    ruby {
      code => "
        timestamp = event.get('@timestamp')
        if timestamp
          # Convert LogStash::Timestamp to a Ruby Time object, then format
          time_obj = timestamp.time
          pg_timestamp = time_obj.strftime('%Y-%m-%d %H:%M:%S.%L')
          event.set('[@metadata][pg_timestamp]', pg_timestamp)
        end
      "
    }

    if [parameters] {
      split {
        field => "parameters"
      }

      mutate {
        rename => {
          "[parameters][id]" => "[parameter][id]"
          "[parameters][name]" => "[parameter][name]"
          "[parameters][value]" => "[parameter][value]"
        }
      }
    }

    if ![method][name] {
      mutate {
        add_field => { "[method][name]" => "UNKNOWN" }
      }
    }
    if ![status][code] {
      mutate {
        add_field => { "[status][code]" => 0 }
      }
    }

    mutate {
        convert => { "[status][code]" => "integer" }
    }
  }
}

output {
  if [type] == "api_logs" {

    # Insert response
    if [response][id] and [response][content] {
      jdbc {
        driver_jar_path => "/usr/share/logstash/logstash-core/lib/jars/postgresql-42.7.5.jar"
        driver_class => "org.postgresql.Driver"
        connection_string => "jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}"
        username => "${DB_USER}"
        password => "${DB_PASSWORD}"
        statement => [
          "INSERT INTO services.response (id, response) VALUES (?, ?) ON CONFLICT (id) DO NOTHING;",
          "[response][id]", "[response][content]"
        ]
      }
    }

    # Insert log - Use the formatted pg_timestamp from metadata
    jdbc {
      driver_jar_path => "/usr/share/logstash/logstash-core/lib/jars/postgresql-42.7.5.jar"
      driver_class => "org.postgresql.Driver"
      connection_string => "jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}"
      username => "${DB_USER}"
      password => "${DB_PASSWORD}"
      statement => [
        "INSERT INTO services.log (id, timestamp, ip_address, user_agent, execution_time, request_path, method_id, status_id, response_id) 
         VALUES (?, CAST(? AS TIMESTAMP), ?, ?, ?, ?, 
                 (SELECT id FROM services.method WHERE name = ? LIMIT 1), 
                 (SELECT id FROM services.status WHERE code = ? LIMIT 1), 
                 ?) 
         ON CONFLICT (id) DO NOTHING;",
        "[log][id]", 
        "[@metadata][pg_timestamp]", # Use the formatted timestamp
        "[log][ip_address]", 
        "[log][user_agent]",
        "[log][execution_time]", 
        "[log][request_path]", 
        "[method][name]", 
        "[status][code]", 
        "[response][id]"
      ]
    }

    # Insert parameter (after split)
    if [parameter][id] {
      jdbc {
        driver_jar_path => "/usr/share/logstash/logstash-core/lib/jars/postgresql-42.7.5.jar"
        driver_class => "org.postgresql.Driver"
        connection_string => "jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}"
        username => "${DB_USER}"
        password => "${DB_PASSWORD}"
        statement => [
          "INSERT INTO services.parameter (id, name, value) VALUES (?, ?, ?) ON CONFLICT (id) DO NOTHING;",
          "[parameter][id]", "[parameter][name]", "[parameter][value]"
        ]
      }

      # Insert relationship between log and parameter
      jdbc {
        driver_jar_path => "/usr/share/logstash/logstash-core/lib/jars/postgresql-42.7.5.jar"
        driver_class => "org.postgresql.Driver"
        connection_string => "jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}"
        username => "${DB_USER}"
        password => "${DB_PASSWORD}"
        statement => [
          "INSERT INTO services.request (log_id, parameter_id) VALUES (?, ?) ON CONFLICT (log_id, parameter_id) DO NOTHING;",
          "[@metadata][log_id]", "[parameter][id]"
        ]
      }
    }
  }
}